name: Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main

jobs:

  test-x86:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        arch: [ x86_64 ]
        python_version: [
          "3.10",
          "3.11"
        ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2

      - name: Install CUDA
        run: |
          sudo apt install -y build-essential kmod
          
          wget -q https://developer.download.nvidia.com/compute/cuda/11.7.1/local_installers/cuda_11.7.1_515.65.01_linux.run
          sudo sh cuda_11.7.1_515.65.01_linux.run --silent
          if [[ $? -ne 0 ]]; then
              echo "CUDA Installation Error."
              exit 1
          fi
          
          CUDA_PATH=/usr/local/cuda
          echo "CUDA_PATH=${CUDA_PATH}"
          export CUDA_PATH=${CUDA_PATH}
          export PATH="$CUDA_PATH/bin:$PATH"
          export LD_LIBRARY_PATH="$CUDA_PATH/lib:$LD_LIBRARY_PATH"
          export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$LD_LIBRARY_PATH"
          # Check nvcc is now available.
          nvcc -V
          # If executed on github actions, make the appropriate echo statements to update the environment
          # Set paths for subsequent steps, using ${CUDA_PATH}
          echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
          echo "CUDA_PATH=${CUDA_PATH}" >> $GITHUB_ENV
          echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib64:${LD_LIBRARY_PATH}" >> $GITHUB_ENV

      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install
        run: |
          CMAKE_GENERATOR=Ninja pip install . -v

      - name: Build SwiftShader
        run: |
          git clone https://github.com/google/swiftshader.git && cd swiftshader/build
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          cmake .. && cmake --build . --parallel 4

      - name: Test
        run: |
          export VK_ICD_FILENAMES=$PWD/swiftshader/build/Linux/vk_swiftshader_icd.json
          pytest --ignore-glob=*test_nns* tests


#  test-aarch64:
#
#    runs-on: ubuntu-latest
#
#    strategy:
#      fail-fast: false
#      matrix:
#        base_image: [
#          "balenalib/raspberrypi4-64-ubuntu-python:3.10-jammy-build",
#          "balenalib/raspberrypi4-64-ubuntu-python:3.11-jammy-build"
#        ]
#
#    steps:
#      - name: Setup cache
#        uses: actions/cache@v2
#        with:
#          path: |
#            ~/.ccache
#          key: build_v1_${{ matrix.base_image }}
#
#      - uses: actions/checkout@v3
#      - uses: uraimo/run-on-arch-action@v2.5.0
#        name: Run commands
#        id: runcmd
#        with:
#          env: |
#            GITHUB_WORKFLOW: ${{ matrix.base_image }}
#          arch: aarch64
#          distro: none
#          base_image: ${{ matrix.base_image }}
#          githubToken: ${{ github.token }}
#          # Create cached/volume directories on host
#          setup: |
#            mkdir -p ~/.ccache
#
#          # Mount cached directories in the container for faster builds
#          dockerRunArgs: |
#            --volume "${HOME}/.ccache:/root/.ccache" --volume "${PWD}:/repo"
#
#          # Install ccache and gcc/g++ symlinks in the container
#          install: |
#            apt-get update -q -y
#            apt-get install build-essential ccache -q -y
#            /usr/sbin/update-ccache-symlinks
#            echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc
#            pip install cmake auditwheel patchelf wheel
#            echo 'CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)' | tee -a ~/.bashrc
#            mkdir /wheelhouse
#            pip wheel z3-solver==4.12.1.0 -w /wheelhouse -v
#
#          run: |
#            cd /repo
#            cp -R /wheelhouse .
#            z3wheel=$(ls wheelhouse | head -1)
#            auditwheel repair --plat manylinux_2_35_aarch64 wheelhouse/$z3wheel
#
#            pip install -r build-requirements.txt
#            pip install . --no-build-isolation -v -f wheelhouse
#            pip install pytest
#            cd tests && pytest --ignore-glob=*test_nns* --ignore-glob=*test_vulkan* --ignore-glob=*test_gpu* --ignore-glob=*test_openmp* *
