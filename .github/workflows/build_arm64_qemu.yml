name: Build ARM QEMU

on:
  workflow_dispatch:
    branches:
      - main

jobs:

  build:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        base_image: [
          "balenalib/raspberrypi4-64-ubuntu-python:3.10-jammy-build",
          "balenalib/raspberrypi4-64-ubuntu-python:3.11-jammy-build"
        ]

    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2.5.0
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: none
          base_image: ${{ matrix.base_image }}
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/repo"
          install: |
            apt-get install -y gcc
            CMAKE_BUILD_PARALLEL_LEVEL=$(nproc) pip install z3-solver==4.12.1.0 cmake -vvvv

          run: |
            cd /repo
            export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
            pip install -r requirements.txt -vvvv
            pip wheel . --no-deps --no-build-isolation -vvvv -w wheelhouse && rm -rf loopy.egg-info
            pip install wheelhouse/$(ls wheelhouse | head -1) --no-build-isolation
            cd tests && pytest *.py

      - name: Copy wheel
        run: |
          mkdir -p ${{ github.sha }}
          mv wheelhouse/loopy*.whl ${{ github.sha }}/

      - name: Upload an artifact
        uses: actions/upload-artifact@v3
        if: github.event_name == 'workflow_dispatch'
        with:
          if-no-files-found: error
          name: build_artifact
          path: ${{ github.sha }}

  upload-tarballs:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    needs: [ build ]

    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifact
          path: ${{ github.sha }}

      - name: Set up a release page
        id: setup_release
        run: |
          LOOPY_VERSION=$(python setup.py --version)
          tag_name="$LOOPY_VERSION"
          release_title="loopy $LOOPY_VERSION"
          echo "loopy $LOOPY_VERSION created at $(date)" > body.md
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          echo "release_title=${release_title}" >> $GITHUB_OUTPUT

      - name: Upload tarballs
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.sha }}/*.whl"
          bodyFile: body.md
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "${{ steps.setup_release.outputs.tag_name }}"
          name: "${{ steps.setup_release.outputs.release_title }}"
          allowUpdates: true
          replacesArtifacts: true
